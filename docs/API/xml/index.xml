<?xml version='1.0' encoding='utf-8'?>
<index xmlns="http://jessevdk.github.com/cldoc/1.0">
  <variable id="lm048_default_state" name="lm048_default_state">
    <brief>The default parser state</brief>
    <doc>Used when NULL is passed to a <ref ref="lm048_parser#lm048_parser">lm048_parser</ref> function argument.</doc>
    <type name="lm048_parser" ref="lm048_parser#lm048_parser" />
  </variable>
  <struct name="lm048_packet" ref="lm048_packet#lm048_packet">
    <brief>Encapsulates a discrete AT command or response</brief>
  </struct>
  <struct name="lm048_parser" ref="lm048_parser#lm048_parser">
    <brief> Parser state and callbacks</brief>
  </struct>
  <struct name="lm048_queue" ref="lm048_queue#lm048_queue">
    <brief>A queue of command, response pairs.</brief>
  </struct>
  <enum anonymous="yes" id="LM048_AT" name="LM048_AT">
    <brief>Enumeration of AT commands and responses</brief>
    <enumvalue id="LM048_AT_NONE" name="LM048_AT_NONE" value="-1">
      <brief>The absence of any command or response</brief>
    </enumvalue>
    <enumvalue id="LM048_AT_OK" name="LM048_AT_OK" value="0">
      <brief>The OK response</brief>
    </enumvalue>
    <enumvalue id="LM048_AT_ERROR" name="LM048_AT_ERROR" value="1">
      <brief>The ERROR response</brief>
    </enumvalue>
    <enumvalue id="LM048_AT_AT" name="LM048_AT_AT" value="2">
      <brief>The AT&amp;lt;cr&amp;gt; command</brief>
    </enumvalue>
    <enumvalue id="LM048_AT_VALUE_RESPONSE" name="LM048_AT_VALUE_RESPONSE" value="3">
      <brief>A common form of response containing a value.</brief>
      <doc>Many query/get commands respond with &amp;lt;crlf&amp;gt;&amp;lt;value&amp;gt;&amp;lt;crlf&amp;gt;OK.
Unfortunately there is ambiguity between this response and all
other types of response, so this response will only be
successfully parsed when the library is expecting it.
<ref ref="lm048_queue#lm048_enqueue">lm048_enqueue</ref> sets the necessary context.</doc>
    </enumvalue>
    <enumvalue id="LM048_AT_VER" name="LM048_AT_VER" value="4">
      <brief>The AT+VER firmware version command</brief>
    </enumvalue>
    <enumvalue id="LM048_AT_VER_RESPONSE" name="LM048_AT_VER_RESPONSE" value="5">
      <brief>The AT+VER firmware version response</brief>
    </enumvalue>
    <enumvalue id="LM048_AT_PIN" name="LM048_AT_PIN" value="6">
      <brief>The AT+PIN code command</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="LM048_ATM" name="LM048_ATM">
    <brief>Enumeration of AT command modifiers i.e +, -, ? and =</brief>
    <enumvalue id="LM048_ATM_NONE" name="LM048_ATM_NONE" value="0">
      <brief>AT command does not have modifiers</brief>
    </enumvalue>
    <enumvalue id="LM048_ATM_ENABLE" name="LM048_ATM_ENABLE" value="1">
      <brief>AT+COMMAND+</brief>
    </enumvalue>
    <enumvalue id="LM048_ATM_DISABLE" name="LM048_ATM_DISABLE" value="2">
      <brief>AT+COMMAND-</brief>
    </enumvalue>
    <enumvalue id="LM048_ATM_GET" name="LM048_ATM_GET" value="3">
      <brief>AT+COMMAND?</brief>
    </enumvalue>
    <enumvalue id="LM048_ATM_SET" name="LM048_ATM_SET" value="4">
      <brief>AT+COMMAND=&amp;lt;value&amp;gt;</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="LM048_STATUS" name="LM048_STATUS">
    <brief>Function return statuses</brief>
    <enumvalue id="LM048_COMPLETED" name="LM048_COMPLETED" value="0">
      <brief>A response, command or action was processed/completed</brief>
    </enumvalue>
    <enumvalue id="LM048_OK" name="LM048_OK" value="1">
      <brief>No errors occurred, however the primary action was not completed</brief>
    </enumvalue>
    <enumvalue id="LM048_ERROR" name="LM048_ERROR" value="2">
      <brief>An error occurred while processing input or performing some other</brief>
      <doc>action. This does not indicate that the AT error response was
processed</doc>
    </enumvalue>
    <enumvalue id="LM048_FULL" name="LM048_FULL" value="3">
      <brief>Storage of some type is full</brief>
    </enumvalue>
    <enumvalue id="LM048_DEQUEUED" name="LM048_DEQUEUED" value="4">
      <brief>An expected response has been received and removed from the queue</brief>
    </enumvalue>
    <enumvalue id="LM048_UNEXPECTED" name="LM048_UNEXPECTED" value="5">
      <brief>An unexpected response has been received; the expected response</brief>
      <doc>has also been dequeued</doc>
    </enumvalue>
    <enumvalue id="LM048_EMPTY" name="LM048_EMPTY" value="6">
      <brief>Storage of some type is empty</brief>
    </enumvalue>
    <function id="lm048_packet_init" name="lm048_packet_init">
      <brief>Initialize packet struct</brief>
      <return>
        <type name="LM048_STATUS" ref="index#LM048_STATUS" />
      </return>
      <argument id="lm048_packet_init::packet" name="packet">
        <type name="lm048_packet" qualifier=" const *" ref="lm048_packet#lm048_packet" />
      </argument>
      <argument id="lm048_packet_init::payload" name="payload">
        <type builtin="yes" name="char" qualifier=" const *" />
      </argument>
      <argument id="lm048_packet_init::payload_capacity" name="payload_capacity">
        <type name="size_t" />
      </argument>
    </function>
  </enum>
  <function id="lm048_input" name="lm048_input">
    <brief> Parse the data</brief>
    <doc>Performs the same purpose as <ref ref="lm048_parser#lm048_inputs">lm048_inputs</ref>, but with
automatically managed state.

</doc>
    <return>
      <doc>see <ref ref="lm048_parser#lm048_inputs">lm048_inputs</ref></doc>
      <type name="LM048_STATUS" ref="index#LM048_STATUS" />
    </return>
    <argument id="lm048_input::data" name="data">
      <doc>The text/bytes to parse</doc>
      <type builtin="yes" name="char" qualifier=" const const *" />
    </argument>
    <argument id="lm048_input::length" name="length">
      <doc>The length of the <ref ref="#lm048_input::data">data</ref></doc>
      <type name="size_t" qualifier=" const *" />
    </argument>
  </function>
  <function id="lm048_no_op" name="lm048_no_op">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </function>
  <function id="lm048_no_op_e" name="lm048_no_op_e">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="lm048_no_op_e::cs" name="cs">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="lm048_no_op_e::c" name="c">
      <type builtin="yes" name="char" />
    </argument>
  </function>
  <function id="lm048_skip_line" name="lm048_skip_line">
    <brief> Finds the next newline (carriage return) character</brief>
    <doc>Sometimes you may want to ignore all the data leading up to the next
carriage return or process it via a different method. Use <ref ref="#lm048_skip_line::length">length</ref> to
determine where the newline occurred.

</doc>
    <return>
      <doc><ref ref="#LM048_COMPLETED">LM048_COMPLETED</ref> if a newline was found otherwise <ref ref="#LM048_OK">LM048_OK</ref>.</doc>
      <type name="LM048_STATUS" ref="index#LM048_STATUS" />
    </return>
    <argument id="lm048_skip_line::data" name="data">
      <doc>The text/bytes to parse</doc>
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <argument id="lm048_skip_line::length" name="length">
      <doc>The length of the data on input and the amount left to process on
           output</doc>
      <type name="size_t" qualifier=" const *" />
    </argument>
  </function>
  <report name="Documentation generator" ref="report" />
</index>
