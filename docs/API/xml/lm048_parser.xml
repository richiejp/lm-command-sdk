<?xml version='1.0' encoding='utf-8'?>
<struct id="lm048_parser" name="lm048_parser" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Parser state and callbacks</brief>
  <doc>This structure encapsulates the parser's state machine's... state.
It also contains function pointers to callbacks which the user provides.
This allows you to inject code into the state machine if your desire to
do so. In many cases you do not need to create your own parser struct,
as there is a default one embedded in the library.

Call <ref ref="lm048_parser#lm048_init">lm048_init</ref> on the lm048_parser struct before using it.
</doc>
  <field id="lm048_parser::cs" name="cs">
    <brief>The current state ID of the Ragel state machine. Changing this</brief>
    <doc>variable directly requires carefull examination of the resultant
state machine.</doc>
    <type builtin="yes" name="int" />
  </field>
  <field id="lm048_parser::on_ok_response" name="on_ok_response">
    <brief>Action to take when OK response is parsed</brief>
    <type class="function" qualifier="*">
      <result>
        <type builtin="yes" name="void" />
      </result>
      <arguments />
    </type>
  </field>
  <field id="lm048_parser::on_error_response" name="on_error_response">
    <brief>Action to take when ERROR response is parsed</brief>
    <type class="function" qualifier="*">
      <result>
        <type builtin="yes" name="void" />
      </result>
      <arguments />
    </type>
  </field>
  <field id="lm048_parser::on_error" name="on_error">
    <brief>Action to take when a lexing error occures</brief>
    <type class="function" qualifier="*">
      <result>
        <type builtin="yes" name="void" />
      </result>
      <arguments>
        <type builtin="yes" name="int" />
        <type builtin="yes" name="char" />
      </arguments>
    </type>
  </field>
  <field id="lm048_parser::on_completed" name="on_completed">
    <brief>Action to take when a command or response is parsed</brief>
    <doc>The default action is to break out of the parsing loop, meaning
<ref ref="index#lm048_input">lm048_input</ref>(s) will return without processing anymore data.
Assigning a callback will stop this behaviour, which may have
unexpected effects e.g. it will sometimes stop items from being
dequeued.</doc>
    <type class="function" qualifier="*">
      <result>
        <type builtin="yes" name="void" />
      </result>
      <arguments />
    </type>
  </field>
  <field id="lm048_parser::queue" name="queue">
    <brief>A queue of expected commands and responses.</brief>
    <doc>When an item is processed by <ref ref="lm048_parser#lm048_inputs">lm048_inputs</ref> it is compared
against the command-response at the front of this queue.</doc>
    <type name="lm048_queue" qualifier="*" ref="lm048_queue#lm048_queue" />
  </field>
  <function id="lm048_init" name="lm048_init">
    <brief> Sets the members of <ref ref="lm048_parser#lm048_parser">lm048_parser</ref> to safe defaults</brief>
    <doc>This will overwrite all the members of the structure.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="lm048_init::state" name="state">
      <doc>An uninitialised state</doc>
      <type name="lm048_parser" qualifier=" const *" ref="lm048_parser#lm048_parser" />
    </argument>
  </function>
  <function id="lm048_inputs" name="lm048_inputs">
    <brief> Parse the data</brief>
    <doc>When data is received, feed it into this function. The <ref ref="lm048_parser#lm048_inputs::state">state</ref> argument
will be updated accordingly to a new state based on the contents of
<ref ref="lm048_parser#lm048_inputs::data">data</ref>. The behaviour of this function is dependant on what callbacks
have been registered and whether there are any items in the
<ref ref="lm048_parser#lm048_parser::queue">lm048_parser::queue</ref>.

</doc>
    <return>
      <doc>Either <ref ref="#LM048_OK">LM048_OK</ref> when no items were fully completed, but no
        errors occurred either, <ref ref="#LM048_ERROR">LM048_ERROR</ref> when invalid data or some
        other problem is encountered and <ref ref="#LM048_COMPLETED">LM048_COMPLETED</ref> when an item
        is fully processed. Also <ref ref="#LM048_DEQUEUED">LM048_DEQUEUED</ref> and <ref ref="#LM048_UNEXPECTED">LM048_UNEXPECTED</ref>
        can occure when a queue is being used, see <ref ref="lm048_queue#lm048_queue">lm048_queue</ref>.</doc>
      <type name="LM048_STATUS" ref="index#LM048_STATUS" />
    </return>
    <argument id="lm048_inputs::state" name="state">
      <doc>The current state and callbacks or NULL</doc>
      <type name="lm048_parser" qualifier=" const *" ref="lm048_parser#lm048_parser" />
    </argument>
    <argument id="lm048_inputs::data" name="data">
      <doc>The text/bytes to parse</doc>
      <type builtin="yes" name="char" qualifier=" const const *" />
    </argument>
    <argument id="lm048_inputs::length" name="length">
      <doc>The length of the <ref ref="lm048_parser#lm048_inputs::data">data</ref> on input and the length of the data
        left to parse on output</doc>
      <type name="size_t" qualifier=" const *" />
    </argument>
  </function>
  <function id="lm048_restart" name="lm048_restart">
    <brief> Set the parser to the begining state</brief>
    <doc>This sets the cs member of <ref ref="lm048_parser#lm048_restart::state">state</ref> to the start value. If <ref ref="lm048_parser#lm048_restart::state">state</ref>
is NULL then the default global state variable is used.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="lm048_restart::state" name="state">
      <doc>A parser's state or NULL</doc>
      <type name="lm048_parser" qualifier=" const *" ref="lm048_parser#lm048_parser" />
    </argument>
  </function>
</struct>
