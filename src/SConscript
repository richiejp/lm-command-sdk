#!Python

import os

#Clang is my prefered C compiler, however most common compilers should work
CC = 'clang -fcolor-diagnostics'

#Get the clang analyzer compiler from the external environment
if GetOption('analyze') is True:
	CC = os.getenv('CC')


print CC

#Compiler arguments
CCFLAGS = " ".join([
	'-Weverything',    #Remove when not using clang
	'-std=c11'
])

#Register Ragel as a builder
ragel = Builder(action = 'ragel -G2 $SOURCE -o $TARGET',
								suffix = '.c',
								src_suffix = '.rl')
BUILDERS = { 'Ragel': ragel }

print CC

env = Environment(CC = CC, 
								  CCFLAGS = CCFLAGS,
									BUILDERS = BUILDERS,
									SHLIBPREFIX = "")

#Import the Clang analyzer variables from the external environment
if GetOption('analyze'):
	env['ENV'].update(x for x in os.environ.items() if x[0].startswith('CCC_'))
else:
	#Import terminal environment variable to make Clang output more readable
	env['ENV']['TERM'] = os.environ['TERM']

#Generate the API documentation using cldoc
docs = env.Command( Dir('docs')
									 ,['lm048lib.h', 'lm951lib.h']
									 ,'cldoc generate -- --report --language c $SOURCE --output $TARGET')
env.Clean(docs, Glob('docs/*'))

#Copy the documentation into the main docs folder
copydocs = env.Command(Dir('../docs/API'), Dir('docs'), [
														Delete(Dir('../docs/API'))
													 ,Copy(Dir('../docs/API'), Dir('docs'))])
env.Depends(copydocs, docs)

LM048_C_FILES = [
	'lm048lib.c'
]

LM951_C_FILES = [
	'lm951lib.c'
]

C_FILES = LM048_C_FILES + LM951_C_FILES

LM048_TEST_FILES = [
	'lm048lib.c',
	'lm048_tests.c'
]

LM951_TEST_FILES = [
	'lm951lib.c',
	'lm951_tests.c'
]

RAGEL_FILES = [
	'lm048lib.rl',
	'lm951lib.rl'
]

#Build the library, note that Ragel only takes a single file as input
for rl in RAGEL_FILES:
	env.Ragel(rl)
lib = env.Library(C_FILES)
lm048_slib = env.SharedLibrary(LM048_C_FILES, CPPDEFINES='LM048_DLL')
lm048_dll = env.Alias('lm048-dll', lm048_slib)

#Set only the library as the default build target
env.Default(lib)

#Build the tests and run them on check command
lm048_tests = env.Program('lm048_tests', LM048_TEST_FILES)
lm951_tests = env.Program('lm951_tests', LM951_TEST_FILES)
lm048_check = env.Alias('check-lm048', lm048_tests, lm048_tests[0].abspath)
lm951_check = env.Alias('check-lm951', lm951_tests, lm951_tests[0].abspath)
env.Depends(lm048_check, lm048_tests)
env.Depends(lm951_check, lm951_tests)
